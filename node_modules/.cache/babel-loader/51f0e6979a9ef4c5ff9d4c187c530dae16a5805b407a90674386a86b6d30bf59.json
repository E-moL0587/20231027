{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/\\u7AF9\\u5185 \\u6D77\\u6597/workspace/Hackathon/20231027/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _toConsumableArray = require(\"C:/Users/\\u7AF9\\u5185 \\u6D77\\u6597/workspace/Hackathon/20231027/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _objectSpread = require(\"C:/Users/\\u7AF9\\u5185 \\u6D77\\u6597/workspace/Hackathon/20231027/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _objectWithoutProperties = require(\"C:/Users/\\u7AF9\\u5185 \\u6D77\\u6597/workspace/Hackathon/20231027/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/\\u7AF9\\u5185 \\u6D77\\u6597/workspace/Hackathon/20231027/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _excluded = [\"logger\", \"errorHandler\"];\nvar resolvePaths = require('./utils/resolvePaths');\nvar circularize = require('./utils/circularize');\nvar createJob = require('./createJob');\nvar _require = require('./utils/log'),\n  log = _require.log;\nvar getId = require('./utils/getId');\nvar OEM = require('./constants/OEM');\nvar _require2 = require('./worker/node'),\n  defaultOptions = _require2.defaultOptions,\n  spawnWorker = _require2.spawnWorker,\n  terminateWorker = _require2.terminateWorker,\n  onMessage = _require2.onMessage,\n  loadImage = _require2.loadImage,\n  send = _require2.send;\nvar workerCounter = 0;\nmodule.exports = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n  var langs,\n    oem,\n    _options,\n    config,\n    id,\n    _resolvePaths,\n    logger,\n    errorHandler,\n    options,\n    resolves,\n    rejects,\n    currentLangs,\n    currentOem,\n    currentConfig,\n    lstmOnlyCore,\n    workerResReject,\n    workerResResolve,\n    workerRes,\n    workerError,\n    worker,\n    setResolve,\n    setReject,\n    startJob,\n    load,\n    loadInternal,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    loadLanguageInternal,\n    initialize,\n    initializeInternal,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n    resolveObj,\n    _args4 = arguments;\n  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        langs = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 'eng';\n        oem = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : OEM.LSTM_ONLY;\n        _options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n        config = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n        id = getId('Worker', workerCounter);\n        _resolvePaths = resolvePaths(_objectSpread(_objectSpread({}, defaultOptions), _options)), logger = _resolvePaths.logger, errorHandler = _resolvePaths.errorHandler, options = _objectWithoutProperties(_resolvePaths, _excluded);\n        resolves = {};\n        rejects = {}; // Current langs, oem, and config file.\n        // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n        currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n        currentOem = oem;\n        currentConfig = config;\n        lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n        workerRes = new Promise(function (resolve, reject) {\n          workerResResolve = resolve;\n          workerResReject = reject;\n        });\n        workerError = function workerError(event) {\n          workerResReject(event.message);\n        };\n        worker = spawnWorker(options);\n        worker.onerror = workerError;\n        workerCounter += 1;\n        setResolve = function setResolve(action, res) {\n          resolves[action] = res;\n        };\n        setReject = function setReject(action, rej) {\n          rejects[action] = rej;\n        };\n        startJob = function startJob(_ref2) {\n          var jobId = _ref2.id,\n            action = _ref2.action,\n            payload = _ref2.payload;\n          return new Promise(function (resolve, reject) {\n            log(\"[\".concat(id, \"]: Start \").concat(jobId, \", action=\").concat(action));\n            setResolve(action, resolve);\n            setReject(action, reject);\n            send(worker, {\n              workerId: id,\n              jobId: jobId,\n              action: action,\n              payload: payload\n            });\n          });\n        };\n        load = function load() {\n          return console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)');\n        };\n        loadInternal = function loadInternal(jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'load',\n            payload: {\n              options: {\n                lstmOnly: lstmOnlyCore,\n                corePath: options.corePath,\n                logging: options.logging\n              }\n            }\n          }));\n        };\n        writeText = function writeText(path, text, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'FS',\n            payload: {\n              method: 'writeFile',\n              args: [path, text]\n            }\n          }));\n        };\n        readText = function readText(path, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'FS',\n            payload: {\n              method: 'readFile',\n              args: [path, {\n                encoding: 'utf8'\n              }]\n            }\n          }));\n        };\n        removeFile = function removeFile(path, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'FS',\n            payload: {\n              method: 'unlink',\n              args: [path]\n            }\n          }));\n        };\n        FS = function FS(method, args, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'FS',\n            payload: {\n              method: method,\n              args: args\n            }\n          }));\n        };\n        loadLanguage = function loadLanguage() {\n          return console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)');\n        };\n        loadLanguageInternal = function loadLanguageInternal(_langs, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'loadLanguage',\n            payload: {\n              langs: _langs,\n              options: {\n                langPath: options.langPath,\n                dataPath: options.dataPath,\n                cachePath: options.cachePath,\n                cacheMethod: options.cacheMethod,\n                gzip: options.gzip,\n                lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem) && !options.legacyLang\n              }\n            }\n          }));\n        };\n        initialize = function initialize() {\n          return console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)');\n        };\n        initializeInternal = function initializeInternal(_langs, _oem, _config, jobId) {\n          return startJob(createJob({\n            id: jobId,\n            action: 'initialize',\n            payload: {\n              langs: _langs,\n              oem: _oem,\n              config: _config\n            }\n          }));\n        };\n        reinitialize = function reinitialize() {\n          var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n          var oem = arguments.length > 1 ? arguments[1] : undefined;\n          var config = arguments.length > 2 ? arguments[2] : undefined;\n          var jobId = arguments.length > 3 ? arguments[3] : undefined;\n          // eslint-disable-line\n\n          if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n          var _oem = oem || currentOem;\n          currentOem = _oem;\n          var _config = config || currentConfig;\n          currentConfig = _config;\n\n          // Only load langs that are not already loaded.\n          // This logic fails if the user downloaded the LSTM-only English data for a language\n          // and then uses `worker.reinitialize` to switch to the Legacy engine.\n          // However, the correct data will still be downloaded after initialization fails\n          // and this can be avoided entirely if the user loads the correct data ahead of time.\n          var langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n          var _langs = langsArr.filter(function (x) {\n            return !currentLangs.includes(x);\n          });\n          currentLangs.push.apply(currentLangs, _toConsumableArray(_langs));\n          if (_langs.length > 0) {\n            return loadLanguageInternal(_langs, jobId).then(function () {\n              return initializeInternal(langs, _oem, _config, jobId);\n            });\n          }\n          return initializeInternal(langs, _oem, _config, jobId);\n        };\n        setParameters = function setParameters() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var jobId = arguments.length > 1 ? arguments[1] : undefined;\n          return startJob(createJob({\n            id: jobId,\n            action: 'setParameters',\n            payload: {\n              params: params\n            }\n          }));\n        };\n        recognize = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(image) {\n            var opts,\n              output,\n              jobId,\n              _args = arguments;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                  output = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n                    blocks: true,\n                    text: true,\n                    hocr: true,\n                    tsv: true\n                  };\n                  jobId = _args.length > 3 ? _args[3] : undefined;\n                  _context.t0 = startJob;\n                  _context.t1 = createJob;\n                  _context.t2 = jobId;\n                  _context.next = 8;\n                  return loadImage(image);\n                case 8:\n                  _context.t3 = _context.sent;\n                  _context.t4 = opts;\n                  _context.t5 = output;\n                  _context.t6 = {\n                    image: _context.t3,\n                    options: _context.t4,\n                    output: _context.t5\n                  };\n                  _context.t7 = {\n                    id: _context.t2,\n                    action: 'recognize',\n                    payload: _context.t6\n                  };\n                  _context.t8 = (0, _context.t1)(_context.t7);\n                  return _context.abrupt(\"return\", (0, _context.t0)(_context.t8));\n                case 15:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function recognize(_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n        getPDF = function getPDF() {\n          var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tesseract OCR Result';\n          var textonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          var jobId = arguments.length > 2 ? arguments[2] : undefined;\n          console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n          return startJob(createJob({\n            id: jobId,\n            action: 'getPDF',\n            payload: {\n              title: title,\n              textonly: textonly\n            }\n          }));\n        };\n        detect = /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image, jobId) {\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!lstmOnlyCore) {\n                    _context2.next = 2;\n                    break;\n                  }\n                  throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n                case 2:\n                  _context2.t0 = startJob;\n                  _context2.t1 = createJob;\n                  _context2.t2 = jobId;\n                  _context2.next = 7;\n                  return loadImage(image);\n                case 7:\n                  _context2.t3 = _context2.sent;\n                  _context2.t4 = {\n                    image: _context2.t3\n                  };\n                  _context2.t5 = {\n                    id: _context2.t2,\n                    action: 'detect',\n                    payload: _context2.t4\n                  };\n                  _context2.t6 = (0, _context2.t1)(_context2.t5);\n                  return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t6));\n                case 12:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          return function detect(_x2, _x3) {\n            return _ref4.apply(this, arguments);\n          };\n        }();\n        terminate = /*#__PURE__*/function () {\n          var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (worker !== null) {\n                    /*\n                    await startJob(createJob({\n                      id: jobId,\n                      action: 'terminate',\n                    }));\n                    */\n                    terminateWorker(worker);\n                    worker = null;\n                  }\n                  return _context3.abrupt(\"return\", Promise.resolve());\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          }));\n          return function terminate() {\n            return _ref5.apply(this, arguments);\n          };\n        }();\n        onMessage(worker, function (_ref6) {\n          var workerId = _ref6.workerId,\n            jobId = _ref6.jobId,\n            status = _ref6.status,\n            action = _ref6.action,\n            data = _ref6.data;\n          if (status === 'resolve') {\n            log(\"[\".concat(workerId, \"]: Complete \").concat(jobId));\n            var d = data;\n            if (action === 'recognize') {\n              d = circularize(data);\n            } else if (action === 'getPDF') {\n              d = Array.from(_objectSpread(_objectSpread({}, data), {}, {\n                length: Object.keys(data).length\n              }));\n            }\n            resolves[action]({\n              jobId: jobId,\n              data: d\n            });\n          } else if (status === 'reject') {\n            rejects[action](data);\n            if (action === 'load') workerResReject(data);\n            if (errorHandler) {\n              errorHandler(data);\n            } else {\n              throw Error(data);\n            }\n          } else if (status === 'progress') {\n            logger(_objectSpread(_objectSpread({}, data), {}, {\n              userJobId: jobId\n            }));\n          }\n        });\n        resolveObj = {\n          id: id,\n          worker: worker,\n          setResolve: setResolve,\n          setReject: setReject,\n          load: load,\n          writeText: writeText,\n          readText: readText,\n          removeFile: removeFile,\n          FS: FS,\n          loadLanguage: loadLanguage,\n          initialize: initialize,\n          reinitialize: reinitialize,\n          setParameters: setParameters,\n          recognize: recognize,\n          getPDF: getPDF,\n          detect: detect,\n          terminate: terminate\n        };\n        loadInternal().then(function () {\n          return loadLanguageInternal(langs);\n        }).then(function () {\n          return initializeInternal(langs, oem, config);\n        }).then(function () {\n          return workerResResolve(resolveObj);\n        }).catch(function () {});\n        return _context4.abrupt(\"return\", workerRes);\n      case 40:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _callee4);\n}));","map":{"version":3,"names":["resolvePaths","require","circularize","createJob","_require","log","getId","OEM","_require2","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","langs","oem","_options","config","id","_resolvePaths","logger","errorHandler","options","resolves","rejects","currentLangs","currentOem","currentConfig","lstmOnlyCore","workerResReject","workerResResolve","workerRes","workerError","worker","setResolve","setReject","startJob","load","loadInternal","writeText","readText","removeFile","FS","loadLanguage","loadLanguageInternal","initialize","initializeInternal","reinitialize","setParameters","recognize","getPDF","detect","terminate","resolveObj","_args4","arguments","wrap","_callee4$","_context4","prev","next","length","undefined","LSTM_ONLY","_objectSpread","_objectWithoutProperties","_excluded","split","DEFAULT","includes","legacyCore","Promise","resolve","reject","event","message","onerror","action","res","rej","_ref2","jobId","payload","concat","workerId","console","warn","lstmOnly","corePath","logging","path","text","method","args","encoding","_langs","langPath","dataPath","cachePath","cacheMethod","gzip","TESSERACT_LSTM_COMBINED","legacyLang","_oem","_config","TESSERACT_ONLY","Error","langsArr","filter","x","push","apply","_toConsumableArray","then","params","_ref3","_callee","image","opts","output","_args","_callee$","_context","blocks","hocr","tsv","t0","t1","t2","t3","sent","t4","t5","t6","t7","t8","abrupt","stop","_x","title","textonly","_ref4","_callee2","_callee2$","_context2","_x2","_x3","_ref5","_callee3","_callee3$","_context3","_ref6","status","data","d","Array","from","Object","keys","userJobId","catch"],"sources":["C:/Users/竹内 海斗/workspace/Hackathon/20231027/node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}